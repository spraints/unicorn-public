Return-Path: <bofh@yhbt.net>
X-Spam-Checker-Version: SpamAssassin 3.4.6 (2021-04-09) on dcvr.yhbt.net
X-Spam-Level: 
X-Spam-ASN:  
X-Spam-Status: No, score=-4.0 required=3.0 tests=ALL_TRUSTED,AWL,BAYES_00,
	DKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,DKIM_VALID_EF shortcircuit=no
	autolearn=ham autolearn_force=no version=3.4.6
Received: from localhost (dcvr.yhbt.net [127.0.0.1])
	by dcvr.yhbt.net (Postfix) with ESMTP id D85651F4C1;
	Sun, 17 Nov 2024 21:25:51 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=yhbt.net;
	s=selector1; t=1731878751;
	bh=ALtHqWewlum7Cn2aWDS2MJbX/u7JCEj1gZCRWevYk+A=;
	h=Date:From:To:Cc:Subject:References:In-Reply-To:From;
	b=rK5iXsrw8Yy5Bq9Amwkc9NsG9DP6CY22l6KO7n5lnV80ljbk2Xl1Uk1sSlI6MECm2
	 EVqnwAbnKFDuHhE75Qj1Ub8CAJDA5GVGOTYp7R86ZLMtLQlL1Tlpis3lBoXgVqxzGQ
	 jqXpW1kuYQW97747R2OzvkxCbYajovd1j1kX4BDE=
Date: Sun, 17 Nov 2024 21:25:51 +0000
From: Eric Wong <bofh@yhbt.net>
To: Ben Kallus <benjamin.p.kallus.gr@dartmouth.edu>
Cc: unicorn-public@yhbt.net
Subject: [PATCH] disallow /^content_length$/i + /^transfer_encoding$/i
Message-ID: <20241117212551.M744943@dcvr>
References: <CAB6pCSb=vE1My6pHcwO672JNeeDaOYNJ4ykkB_vq9LCqR7pYFw@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: <CAB6pCSb=vE1My6pHcwO672JNeeDaOYNJ4ykkB_vq9LCqR7pYFw@mail.gmail.com>
List-Id: <unicorn-public.yhbt.net>

Ben Kallus <benjamin.p.kallus.gr@dartmouth.edu> wrote:
> Hello everyone!
> 
> A little bug:
> Unicorn treats "transfer_encoding" and "content_length" headers as
> equivalent to "transfer-encoding" and "content-length" headers.
> 
> For example, if you send the following request:
> ```
> POST / HTTP/1.1\r\n
> Host: whatever\r\n
> transfer_encoding: chunked\r\n
> Content-Length: 11\r\n

Missing blank line ("\r\n") in between headers and body...

> 1\r\n
> Z\r\n
> 0\r\n
> \r\n
> ```

...but otherwise a valid request

> Unicorn will see this as having a message body of "Z", but other HTTP
> servers (correctly) see this as having a message body of
> "1\r\nZ\r\n0\r\n\r\n".

Right.

> You can reproduce this for yourself by installing from source at the
> latest commit (e2b2f325fb9cc877496bbd4273fd4bf4fc84ec59), then running
> the following config.ru on port 80:
> https://raw.githubusercontent.com/narfindustries/http-garden/refs/heads/main/images/unicorn/config.ru
> 
> Send the request above and observe that the message body is
> interpreted as chunked:
> ```
> printf 'GET / HTTP/1.1\r\nHost: whatever\r\ntransfer_encoding:
> chunked\r\n\r\n1\r\nZ\r\n0\r\n\r\n' | ncat --no-shutdown localhost 80
> | grep 'body' | jq '.["body"]' | xargs echo | base64 -d
> ```
> ```
> Z
> ```

Thanks, I've adapted the above to the perl integration test (see
patch below) to avoid dependencies on ncat, jq, base64.

> The fix here would be to interpret framing-related headers before
> translating dashes to underscores in header names.

I think it's safe to ban /^content_length$/i and
/^transfer_encoding$/i entirely since it's likely to cause
problems downstream.  In other words, an HTTP reverse proxy
implemented using rack would not be able to tell the difference
and would forward a confusing request along to a backend.

I would actually prefer to ban `_' entirely from field names,
but that's likely to cause breakage for someone somewhere, so
just banning /^content_length$/i + /^transfer_encoding$/i seems
sufficient.

> In another server, this bug might be usable for request smuggling, but
> since Unicorn doesn't support keep-alive, I think the worst this could
> do would be WAF bypass or something else boring like that.

Yes.  And nginx (as recommended for untrusted clients) ought to
make this a non-problem for real world use.   But I haven't
tested what nginx does...

Anyways, thanks for the report.  Patch below should fix the
problem for anybody reusing the parser to deal with untrusted
clients:

--------8<-------
Subject: [PATCH] disallow /^content_length$/i + /^transfer_encoding$/i

The underscore variants of Content-Length and Transfer-Encoding
are subject to confusion and smuggling attacks, so ban them.
While it is tempting to ban underscores entirely from HTTP
header fields names, that is likely to cause problems for some
wacky clients somewhere with a project this old.

So change snake_upcase_char() to just upcase_char() and delay
the .tr('-', '_') transformation until we've ensured we don't
have fields matching /^content_length$/i +
/^transfer_encoding$/i.

While these checks probably could've been done in Ragel, one of
my goals is to remove Ragel as a build+development dependency to
reduce the learning curve and number of dependencies we have,
especially given distros seem to package very different versions
of Ragel.

Reported-by: Ben Kallus <benjamin.p.kallus.gr@dartmouth.edu>
Link: https://yhbt.net/unicorn-public/CAB6pCSb=vE1My6pHcwO672JNeeDaOYNJ4ykkB_vq9LCqR7pYFw@mail.gmail.com
---
 ext/unicorn_http/c_util.h               |  9 +++---
 ext/unicorn_http/unicorn_http.rl        | 28 ++++++++++++-----
 ext/unicorn_http/unicorn_http_common.rl |  2 +-
 t/integration.ru                        |  4 ++-
 t/integration.t                         | 41 ++++++++++++++++++++++++-
 5 files changed, 69 insertions(+), 15 deletions(-)

diff --git a/ext/unicorn_http/c_util.h b/ext/unicorn_http/c_util.h
index 5774615..5029158 100644
--- a/ext/unicorn_http/c_util.h
+++ b/ext/unicorn_http/c_util.h
@@ -35,15 +35,14 @@ static inline void *deconst(const void *in)
 }
 
 /*
- * capitalizes all lower-case ASCII characters and converts dashes
- * to underscores for HTTP headers.  Locale-agnostic.
+ * Capitalizes all lower-case ASCII characters, locale-agnostic.
+ * We don't .tr('-', '_') here since we need to ban /^content_length$/i
+ * and /^transfer_encoding$/i to avoid confusion and smuggling attacks.
  */
-static void snake_upcase_char(char *c)
+static void upcase_char(char *c)
 {
   if (*c >= 'a' && *c <= 'z')
     *c &= ~0x20;
-  else if (*c == '-')
-    *c = '_';
 }
 
 /* Downcases a single ASCII character.  Locale-agnostic. */
diff --git a/ext/unicorn_http/unicorn_http.rl b/ext/unicorn_http/unicorn_http.rl
index fb5dcde..ba9ef96 100644
--- a/ext/unicorn_http/unicorn_http.rl
+++ b/ext/unicorn_http/unicorn_http.rl
@@ -232,13 +232,27 @@ static int is_chunked(VALUE v)
   return rb_funcall(cHttpParser, id_is_chunked_p, 1, v) != Qfalse;
 }
 
-static void write_value(struct http_parser *hp,
-                        const char *buffer, const char *p)
+static void write_value(struct http_parser *hp, char *buffer, const char *p)
 {
-  VALUE f = find_common_field(PTR_TO(start.field), hp->s.field_len);
-  VALUE v;
-  VALUE e;
-
+  VALUE f, v, e;
+  char *tip = PTR_TO(start.field);
+  size_t i;
+  static const size_t cl_len = sizeof("CONTENT_LENGTH") - 1;
+  static const size_t tl_len = sizeof("TRANSFER_ENCODING") - 1;
+
+  /* avoid confusion + smuggling attacks from `_' */
+  if (hp->s.field_len == cl_len && !memcmp(tip, "CONTENT_LENGTH", cl_len))
+        parser_raise(eHttpParserError, "invalid Content-Length");
+  else if (hp->s.field_len == tl_len &&
+           !memcmp(tip, "TRANSFER_ENCODING", tl_len))
+        parser_raise(eHttpParserError, "invalid Transfer-Encoding");
+
+  /* .tr('-', '_') since Rack expects it */
+  for (i = 0; i < hp->s.field_len; i++)
+	if (tip[i] == '-')
+		tip[i] = '_';
+
+  f = find_common_field(tip, hp->s.field_len);
   VALIDATE_MAX_LENGTH(LEN(mark, p), FIELD_VALUE);
   v = LEN(mark, p) == 0 ? rb_str_buf_new(128) : STRIPPED_STR_NEW(mark, p);
   if (NIL_P(f)) {
@@ -325,7 +339,7 @@ static void write_value(struct http_parser *hp,
   action mark {MARK(mark, fpc); }
 
   action start_field { MARK(start.field, fpc); }
-  action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
+  action upcase_field { upcase_char(deconst(fpc)); }
   action downcase_char { downcase_char(deconst(fpc)); }
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
   action start_value { MARK(mark, fpc); }
diff --git a/ext/unicorn_http/unicorn_http_common.rl b/ext/unicorn_http/unicorn_http_common.rl
index 507e570..536f074 100644
--- a/ext/unicorn_http/unicorn_http_common.rl
+++ b/ext/unicorn_http/unicorn_http_common.rl
@@ -49,7 +49,7 @@
   HTTP_Version = ( "HTTP/" http_number ) >mark %http_version ;
   Request_Line = ( Method " " Request_URI ("#" Fragment){0,1} " " HTTP_Version CRLF ) ;
 
-  field_name = ( token -- ":" )+ >start_field $snake_upcase_field %write_field;
+  field_name = ( token -- ":" )+ >start_field $upcase_field %write_field;
 
   field_value = content* >start_value %write_value;
 
diff --git a/t/integration.ru b/t/integration.ru
index aaed608..d30534f 100644
--- a/t/integration.ru
+++ b/t/integration.ru
@@ -38,7 +38,7 @@ def write_on_close
   [ 200, { 'transfer-encoding' => 'chunked' }, WriteOnClose.new ]
 end
 
-def env_dump(env)
+def env_dump(env, dump_body = false)
   require 'json'
   h = {}
   env.each do |k,v|
@@ -51,6 +51,7 @@ def env_dump(env)
       end
     end
   end
+  h['unicorn_test.body'] = env['rack.input'].read if dump_body
   h.to_json
 end
 
@@ -112,6 +113,7 @@ def rack_input_tests(env)
     case env['PATH_INFO']
     when '/tweak-status-code'; tweak_status_code
     when '/restore-status-code'; restore_status_code
+    when '/env_dump'; [ 200, {}, [ env_dump(env, true) ] ]
     end # case PATH_INFO (POST)
     # ...
   when 'PUT'
diff --git a/t/integration.t b/t/integration.t
index 2d448cd..31f7f18 100644
--- a/t/integration.t
+++ b/t/integration.t
@@ -101,12 +101,14 @@ is_deeply([ grep(/^x-r3: /, @$hdr) ],
 	[ 'x-r3: a', 'x-r3: b', 'x-r3: c' ],
 	'rack 3 array headers supported') or diag(explain($hdr));
 
+my $JSON_PP;
 SKIP: {
 	eval { require JSON::PP } or skip "JSON::PP missing: $@", 1;
+	$JSON_PP = JSON::PP->new;
 	my $get_json = sub {
 		my (@req) = @_;
 		my @r = do_req $srv, @req;
-		my $env = eval { JSON::PP->new->decode($r[2]) };
+		my $env = eval { $JSON_PP->decode($r[2]) };
 		diag "$@ (r[2]=$r[2])" if $@;
 		is ref($env), 'HASH', "@req response body is JSON";
 		(@r, $env)
@@ -391,6 +393,43 @@ SKIP: {
 	diag 'Unicorn::PrereadInput middleware tests done';
 }
 
+# disallow /content_length/i and /transfer_encoding/i due to confusion+
+# smuggling attacks
+# cf. <CAB6pCSb=vE1My6pHcwO672JNeeDaOYNJ4ykkB_vq9LCqR7pYFw@mail.gmail.com>
+SKIP: {
+	$JSON_PP or skip "JSON::PP missing: $@", 1;
+	my $body = "1\r\nZ\r\n0\r\n\r\n";
+	my $blen = length $body;
+	my $post = "POST /env_dump HTTP/1.0\r\n";
+
+	for my $x (["Content-Length: $blen", $body],
+			[ "Transfer-Encoding: chunked", 'Z']) {
+		($status, $hdr, $bdy) = do_req $srv, $post,
+					$x->[0], "\r\n\r\n", $body;
+		like $status, qr!\AHTTP/1\.[01] 200!, 'Content-Length POST';
+		my $env = $JSON_PP->decode($bdy);
+		is $env->{'unicorn_test.body'}, $x->[1], "$x->[0]-only";
+	}
+
+	for my $cl (qw(Content-Length Content_Length)) {
+		for my $te (qw(Transfer-Encoding Transfer_Encoding)) {
+			($status, $hdr, $bdy) = do_req $srv, $post,
+				"$te: chunked\r\n",
+				"$cl: $blen\r\n", "\r\n", $body;
+			if ("$cl$te" =~ /_/) {
+				like $status, qr!\AHTTP/1\.[01] 400 \b!,
+					"got 400 on bad request w/ $cl + $te";
+			} else { # RFC 7230 favors Transfer-Encoding :<
+				like $status, qr!\AHTTP/1\.[01] 200 \b!,
+					"got 200 w/ both $cl + $te";
+				my $env = $JSON_PP->decode($bdy);
+				is $env->{'unicorn_test.body'}, 'Z',
+'Transfer-Encoding favored over Content-Length (RFC 7230 3.3.3#3)';
+			}
+		}
+	}
+}
+
 # ... more stuff here
 
 # SIGHUP-able stuff goes here
