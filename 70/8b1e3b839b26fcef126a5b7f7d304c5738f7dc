Return-Path: <e@80x24.org>
X-Spam-Checker-Version: SpamAssassin 3.3.2 (2011-06-06) on dcvr.yhbt.net
X-Spam-Level: 
X-Spam-ASN: 
X-Spam-Status: No, score=-2.1 required=3.0 tests=ALL_TRUSTED,AWL,BAYES_00,
 URIBL_BLOCKED shortcircuit=no autolearn=unavailable version=3.3.2
X-Original-To: unicorn-public@bogomips.org
Received: from localhost (dcvr.yhbt.net [127.0.0.1]) by dcvr.yhbt.net
 (Postfix) with ESMTP id DEAB51F42D; Mon, 15 Sep 2014 20:35:16 +0000 (UTC)
Date: Mon, 15 Sep 2014 20:35:16 +0000
From: Eric Wong <e@80x24.org>
To: =?utf-8?Q?Br=C3=A1ulio?= Bhavamitra <braulio@eita.org.br>
Cc: unicorn-public <unicorn-public@bogomips.org>
Subject: Re: hopefully the end of *any* OobGC
Message-ID: <20140915203516.GA10504@dcvr.yhbt.net>
References: <20140915192104.GA8793@dcvr.yhbt.net>
 <CAJri6_smyB0Kx1MkOyKaG=NdaBS-RQeXUKVTMC9ivYWyYYDCFQ@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To:
 <CAJri6_smyB0Kx1MkOyKaG=NdaBS-RQeXUKVTMC9ivYWyYYDCFQ@mail.gmail.com>
List-Id: <unicorn-public@bogomips.org>

Br√°ulio Bhavamitra <braulio@eita.org.br> wrote:
> Eric, do you have any kind of benchmark comparing the ruby versions?

See ko1's links and benchmarks in the original page.

tl;dr: throughput is slightly worse, but performance is more
       consistent (fewer spikes).  Consistent performance is important
       for interactive use such as web servers.

> > [1] https://bugs.ruby-lang.org/issues/10137

Also, as I've told you before: please stop top-posting, sending HTML,
and using the ridiculously large signature.  These messages get seen by
hundreds, if not thousands of people and you're wasting precious
bandwidth/storage/cache space for all of them.  Paying attention to
these things is an important part of what makes unicorn work.

And FWIW, I've been spending much of the past few months applying this
philosophy to ruby-trunk and making tiny reductions in the core RubyVM
data structures here and there, slowly working up to saving several
hundreds of kilobytes in the hottest sections of memory (this will
become megabytes saved with bigger Rails apps).

There's much more work to be done, but the secondary goal of this is to
get me more acquainted with VM internals more so I can dig into less
trivial improvements.
