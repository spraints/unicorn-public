Return-Path: <mongrel-unicorn-bounces@rubyforge.org>
X-Spam-Checker-Version: SpamAssassin 3.3.2 (2011-06-06) on dcvr.yhbt.net
X-Spam-Level: 
X-Spam-ASN: AS33070 50.56.128.0/17
X-Spam-Status: No, score=-0.1 required=5.0 tests=AWL,T_DKIM_INVALID
 shortcircuit=no autolearn=unavailable version=3.3.2
X-Original-To: archivist@yhbt.net
Delivered-To: archivist@dcvr.yhbt.net
Received: from rubyforge.org (50-56-192-79.static.cloud-ips.com
 [50.56.192.79]) by dcvr.yhbt.net (Postfix) with ESMTP id 6DDA21F724 for
 <archivist@yhbt.net>; Mon, 28 Jan 2013 14:44:20 +0000 (UTC)
Received: from localhost.localdomain (localhost [127.0.0.1]) by rubyforge.org
 (Postfix) with ESMTP id CCE142E097; Mon, 28 Jan 2013 14:44:19 +0000 (UTC)
X-Original-To: mongrel-unicorn@rubyforge.org
Delivered-To: mongrel-unicorn@rubyforge.org
Received: from mail-la0-f50.google.com (mail-la0-f50.google.com
 [209.85.215.50]) by rubyforge.org (Postfix) with ESMTP id 2593F2E076 for
 <mongrel-unicorn@rubyforge.org>; Mon, 28 Jan 2013 14:44:12 +0000 (UTC)
Received: by mail-la0-f50.google.com with SMTP id ec20so825288lab.23 for
 <mongrel-unicorn@rubyforge.org>; Mon, 28 Jan 2013 06:44:11 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=godfat.org; s=google;
 h=x-received:mime-version:in-reply-to:references:from:date:message-id
 :subject:to:content-type; bh=k+tso0HH/gFAIhFI39VgpIabxpdxmBTkMS2CjSdLQ90=;
 b=PP7qLQT+4rwcwnRhEp71+fQe0nFX/WkDFr/ar4QP5iSa9Ey8tgfn4JseAc3Xeguzvu
 ykeNlUdYmOxOewUfsiN+mNy78cFp4yjbSwWzTqge/wtVvuh9cfpLDeE60Y+W9umdYlMx
 7I5709jWAM3k5TduAM/Tzvft0nG8Mu+PfhG1U=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com;
 s=20120113;
 h=x-received:mime-version:in-reply-to:references:from:date:message-id
 :subject:to:content-type:x-gm-message-state;
 bh=k+tso0HH/gFAIhFI39VgpIabxpdxmBTkMS2CjSdLQ90=;
 b=WRw8ZPSQIm3QPGRd2OoD3SpIu/9XSexHKz+5xDYKJV2boDb47qAqSta3HTbHiSn8xV
 fwCAV+s55HJ50HlILyaHwa8F1W/vQFsK0EKUIs5iN7JJ9jgX5TLppGee2ndw7oTww4JY
 TROZ0J2s33t7mKfMevcJnI8lWeyaJLuq4YZmMC7VE/nH+aAZF73XlexrpBx5RlJGoBfM
 7WKw+lXB2tQSAQ4CZpUnie0u7BBh+HD4Hsr1ocHzMi/Q51dfHNhlvtHUSZJ+7i3MX0aW
 KMOahtNNwFw9VAn32N2Q6OT1eR8jW4oTxT6UX1kL02WnaMd7fe7L6EVObiOzgf5/d3BR 2/iw==
X-Received: by 10.152.109.210 with SMTP id
 hu18mr13228285lab.12.1359384250928;  Mon, 28 Jan 2013 06:44:10 -0800 (PST)
MIME-Version: 1.0
Received: by 10.112.22.9 with HTTP; Mon, 28 Jan 2013 06:43:39 -0800 (PST)
In-Reply-To: <20130125183959.GA22558@dcvr.yhbt.net>
References:
 <CAA2_N1ubebBWGcK1+a4VnQObGwEMcEnPoOcZizujJcFugtWJeg@mail.gmail.com>
 <20130125183959.GA22558@dcvr.yhbt.net>
From: "Lin Jen-Shin (godfat)" <godfat@godfat.org>
Date: Mon, 28 Jan 2013 22:43:39 +0800
Message-ID:
 <CAA2_N1vKV-6Rtb6dX8+mKbjmSJ04j4XMQk+oeR_JqR5PLA=1fA@mail.gmail.com>
Subject: Re: No middleware without touching RACK_ENV
To: unicorn list <mongrel-unicorn@rubyforge.org>
X-Gm-Message-State:
 ALoCoQkyZyg9DcM4vJPbgj5bdZR5P2UjmRNXoBNka9HlrjUv2dHrWzhQWr2+ZNUrvlFxeiEGZG8L
X-BeenThere: mongrel-unicorn@rubyforge.org
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: <unicorn-public@bogomips.org>
List-Unsubscribe: <http://rubyforge.org/mailman/options/mongrel-unicorn>,
 <mailto:mongrel-unicorn-request@rubyforge.org?subject=unsubscribe>
List-Archive: <http://rubyforge.org/pipermail/mongrel-unicorn>
List-Post: <unicorn-public@bogomips.org>
List-Help: <mailto:mongrel-unicorn-request@rubyforge.org?subject=help>
List-Subscribe: <http://rubyforge.org/mailman/listinfo/mongrel-unicorn>,
 <mailto:mongrel-unicorn-request@rubyforge.org?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: mongrel-unicorn-bounces@rubyforge.org
Errors-To: mongrel-unicorn-bounces@rubyforge.org

On Sat, Jan 26, 2013 at 2:39 AM, Eric Wong <normalperson@yhbt.net> wrote:
> Doesn't Rails favor RAILS_ENV over RACK_ENV?  unicorn ignores RAILS_ENV
> (unicorn_rails respects RAILS_ENV, but unicorn_rails isn't recommended
> for modern (Rack-enabled) Rails)

Yes, it is. But it would still look into RACK_ENV if RAILS_ENV is not available.
One solution would be setting RAILS_ENV=development while setting
RACK_ENV=none. I don't really want to do this for several reasons:

* It would be better to keep RAILS_ENV == RACK_ENV to avoid confusion.
* It might be tricky to make RAILS_ENV default to development while setting
  RACK_ENV since Rails would be looking into it. So we need to make sure
  that Rails is loaded and default to development and then we can setup
  RACK_ENV to avoid messing up the original Rails default.

> Is there a benefit which RACK_ENV=development gives you for Rails
> that RAILS_ENV=development does not give you?

The main reason is that I want to avoid confusion. The other reason
is that that's also how Heroku tries to use. I think it's also because of
consistency. (so that we don't have to distinguish RACK_ENV and RAILS_ENV)

The other reason would be making them different might cause some
issues as Rails would also be looking at RACK_ENV.

> Fwiw, the times I worked on Rails, I used customized dev environments
> anyways, so I would use RAILS_ENV=dev_local or RAILS_ENV=dev_$NETWORK
> for switching between a localhost-only vs networked setup.

I would also do this I guess, but since I am not the only one working on
the application, I would avoid making such changes. We have a lot of
configurations depending on the word "development" already.

>> I know this is somehow a spec from Rack, but I guess I
>> don't like this behaviour. One workaround would be
>> providing a `after_app_load' hook, and we add this to
>> the bottom of config.ru:
>>
>>   ENV['RACK_ENV_ORIGINAL'] = ENV['RACK_ENV']
>>   ENV['RACK_ENV'] = 'none'
>>
>> and add this to the unicorn configuration file:
>>
>>   after_app_load do |_|
>>     ENV['RACK_ENV'] = ENV['RACK_ENV_ORIGINAL']
>>   end
>>
>> This is probably a stupid hack, but I wonder if after_app_load
>> hook would be useful for other cases?
>
> I don't see how this hook has benefits over putting this in config.ru
> (or somewhere else in your app, since your app is already loaded...)

It's better to me because it's clear on the loading order.
The point where to change RACK_ENV=none would be
after Rails loaded (to avoid messing Rails up), and
_before Unicorn inserting middleware_. And then I would
like to switch RACK_ENV=RAILS_ENV to avoid confusion.
It's hard to tell where I can put this code.

> I'd imagine users wanting the same app-wide settings going between
> different application servers, too.

Speaking to this, I might want to complain about the other severs :P
As far as I know, only if you use `rackup' would you get those middleware.

That is, `unicorn' is compatible with `rackup'. That's a good thing.
But it seems to me that both `thin' and `puma' (and maybe including
others, I didn't check) would not do this if you use their command line
tools. They even have different options to enable Rack::CommonLogger.

Actually this is also the reason why sometimes `thin' and `unicorn'
worked differently when people switching from Thin to Unicorn.
And you know a lot of people are using Thin in the first place,
thus sometimes blaming Unicorn works differently.

I am not sure how many people are using `rackup', but according to
my observation, not too much. If people are using Sinatra directly,
eventually they would launch the server via Rack::Handler.get.run,
which does not try to wrap additional middleware as what `rackup'
would do if I read correctly.

So I am not sure if a lot of people would be expecting this actually.
I used to use `rackup' a lot to get consistent behaviour, but it looks to
me not many people even know the existence of rackup :(

> I'm against adding more command-line or config options, especially
> around loading middleware.  RACK_ENV is already a source of confusion,
> and Rails also has/(or had?) it's own middleware loading scheme
> independent of config.ru.

Yes, I hate that, too. I can't complain about Rails less :P I don't understand
why people are building those middleware scheme on their own way,
even Sinatra does this. I guess they want more control over middleware,
so that they can reorder, delete, insert more/less middleware somehow.
I guess that makes sense in some way... but they should be really in
Rack instead of each web framework IMHO.

> git format-patch + git send-email is the recommended way if your
> mail client cannot be taught to leave formatting alone.  Also this
> is easy for sending multiple patches in the same thread.
>
> git format-patch --stdout with a good mail client which will not wrap
> messages is also great (especially for single patches).
>
> Attachments (generated using git format-patch) for text/x-diff should be
> accepted by Mailman.  Attached patches are a last resort, I prefer
> inline patches since I can quote/reply to them inline.
>
> (same patch submission guidelines as git or Linux kernel)

Last time I tried to setup SMTP for git send-email failed.
I'll try again next time. Thanks!

> Commit messages should explain why a change is made/needed, not just
> what it does.

Yeah, I know, but I can understand if none of them is acceptable,
(that's why I didn't bring this up in the first place) and the reason to
build those features might be arguing. So instead of writing them
carefully, I decided to bring this up sooner and then we can work out
the true reason later on :D

Thanks a lot for your time.
_______________________________________________
Unicorn mailing list - mongrel-unicorn@rubyforge.org
http://rubyforge.org/mailman/listinfo/mongrel-unicorn
Do not quote signatures (like this one) or top post when replying
