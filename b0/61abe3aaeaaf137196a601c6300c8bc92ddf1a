Return-Path: <mongrel-unicorn-bounces@rubyforge.org>
X-Spam-Checker-Version: SpamAssassin 3.3.2 (2011-06-06) on dcvr.yhbt.net
X-Spam-Level: 
X-Spam-ASN: AS33070 50.56.128.0/17
X-Spam-Status: No, score=0.0 required=5.0 tests=T_DKIM_INVALID
 shortcircuit=no autolearn=unavailable version=3.3.2
X-Original-To: archivist@yhbt.net
Delivered-To: archivist@dcvr.yhbt.net
Received: from rubyforge.org (50-56-192-79.static.cloud-ips.com
 [50.56.192.79]) by dcvr.yhbt.net (Postfix) with ESMTP id 4CA8D1F5BD for
 <archivist@yhbt.net>; Tue,  2 Apr 2013 20:25:11 +0000 (UTC)
Received: from localhost.localdomain (localhost [127.0.0.1]) by rubyforge.org
 (Postfix) with ESMTP id DEB932E0FA; Tue,  2 Apr 2013 20:25:11 +0000 (UTC)
X-Original-To: mongrel-unicorn@rubyforge.org
Delivered-To: mongrel-unicorn@rubyforge.org
Received: from mail-qa0-f51.google.com (mail-qa0-f51.google.com
 [209.85.216.51]) by rubyforge.org (Postfix) with ESMTP id 326412E0F0 for
 <mongrel-unicorn@rubyforge.org>; Tue,  2 Apr 2013 20:25:04 +0000 (UTC)
Received: by mail-qa0-f51.google.com with SMTP id hg5so486975qab.17 for
 <mongrel-unicorn@rubyforge.org>; Tue, 02 Apr 2013 13:25:03 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=tnux.net; s=google;
 h=mime-version:x-received:x-originating-ip:in-reply-to:references
 :date:message-id:subject:from:to:content-type;
 bh=5Mv/KzN1OTK+AA5nuBP4tktiz5ZH7blC/6AsXdG69gI=;
 b=0KGiu2527zc7WOKgAm4Z0T759rXrbpQQVyOWQmDIoYkvzROciOxa6E70B8pnO9Rub4
 gJ3GM2CvosCdU/PTFHa07d6mPc2pHuEZqBlL6ECTSHcoIS6Y+0GEgEWvRKIaBPHGnQVk
 WnMz6oaGZHu4slDGliguV73tGs0Q8hQhKybl0=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com;
 s=20120113; h=mime-version:x-received:x-originating-ip:in-reply-to:references
 :date:message-id:subject:from:to:content-type:x-gm-message-state;
 bh=5Mv/KzN1OTK+AA5nuBP4tktiz5ZH7blC/6AsXdG69gI=;
 b=ourJbn7Pn6z/nmmnmHfUyt5DfDDZOc62pZ0inZfB9UHuqTRklPnGeyW7/KiRavTHtY
 tmoJCD7sz6CIt0DhUtE3ZusSAh65o3fDLKAn/+vG1GYWgH6iyOKu1ziL7GLSIJw506rI
 H8O/hMiuNx7MJEGJYu9gtGDGGwTopKeuhLeOX8LwW+2uSKr6ghURPIMT3zg0eCMgaLoz
 V5ZE/jiuwW7cD3KFrtk3wwNnHLlpFjgyDhin0uotTjSkxDMOm3z6bngPjkRzTVcc3vio
 yPaG7J7vx3AzkMTtiaLiaxLg+GfHRrSd4L7AKjxxbEvNVAmCaKRmE1htV7ZAEXaoRQTL qZ5w==
MIME-Version: 1.0
X-Received: by 10.224.23.135 with SMTP id r7mr4096322qab.80.1364934303027;
 Tue, 02 Apr 2013 13:25:03 -0700 (PDT)
Received: by 10.49.73.230 with HTTP; Tue, 2 Apr 2013 13:25:02 -0700 (PDT)
X-Originating-IP: [2001:980:6127:1:a4f8:aff:e3c9:dbaf]
In-Reply-To: <20130402172410.GB16286@dcvr.yhbt.net>
References: <513B5CFC.9080706@tnux.net>
 <20130309210227.GA29317@dcvr.yhbt.net>
 <ee3b6afe9db5d89951a2c79d4e66c9e1.squirrel@voorstraat46.tnux.net>
 <20130311194912.GA11462@dcvr.yhbt.net>
 <0f19dafe5f9dde9423a2da669537838e.squirrel@voorstraat46.tnux.net>
 <20130311230157.GB26407@dcvr.yhbt.net>
 <CAGJrHAZa35dGC5fcJGsLgqNQrQ52JdNQApBr+-A58L4=j83DzQ@mail.gmail.com>
 <20130402172410.GB16286@dcvr.yhbt.net>
Date: Tue, 2 Apr 2013 22:25:02 +0200
Message-ID:
 <CAGJrHAbsEHCO6jXGbizs_XjJEns84s6x2i-LUTKCtGKA-OC=oA@mail.gmail.com>
Subject: Re: Unicorn hangs on POST request
From: Tom Pesman <tom@tnux.net>
To: unicorn list <mongrel-unicorn@rubyforge.org>
X-Gm-Message-State:
 ALoCoQmc7c8OalzyyoVQenrvcLi2DuCWuY+47sO4eDkOOGTQsGCAuthv1QdR3LFFBG44WQp4ITjK
X-BeenThere: mongrel-unicorn@rubyforge.org
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: <unicorn-public@bogomips.org>
List-Unsubscribe: <http://rubyforge.org/mailman/options/mongrel-unicorn>,
 <mailto:mongrel-unicorn-request@rubyforge.org?subject=unsubscribe>
List-Archive: <http://rubyforge.org/pipermail/mongrel-unicorn>
List-Post: <unicorn-public@bogomips.org>
List-Help: <mailto:mongrel-unicorn-request@rubyforge.org?subject=help>
List-Subscribe: <http://rubyforge.org/mailman/listinfo/mongrel-unicorn>,
 <mailto:mongrel-unicorn-request@rubyforge.org?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: mongrel-unicorn-bounces@rubyforge.org
Errors-To: mongrel-unicorn-bounces@rubyforge.org

> Probably not, at least it won't improve _consistency_ of performance
> without changing your app.
>
> The problem with buffering in Rainbows!+EM is the buffering happens after
> the work is distributed to different worker processes (Rainbows!+EM is
> still single-threaded).
>
> I don't believe there's a universal Rainbows! configuration which is
> good for most apps.  With Rainbows!+EM, the buffering happens in a late
> stage, after workload is distributed, so you end up with head-of-queue
> blocking inside each process.
>
> All of the modules _without_ "rack.input streaming" will fully buffer
> responses (similar to how Rainbows!+EM) does it:
> http://rainbows.rubyforge.org/Summary.html
>
> However, CoolioThread{Pool/Spawn} should help you with the work load
> distribution problem if your app is thread-safe, but these both do body
> buffering.
>
> However, the multithreaded options _with_ "rack.input streaming" still
> give pretty good performance and let you get around the workload
> distribution problem of the single-threaded + internal buffering
> options.  You'll reduce disk seek overhead with input streaming.
>
> For reference, nginx+unicorn is single-threaded, but with external
> buffering (nginx does the buffering, not unicorn).

Thank you for your extensive response!

To verify my thoughts on this, if I want to prevent the head-of-queue
blocking behaviour, I need to take a module without
rack.input_streaming. But we need to make sure the body is buffered
before it's given to a worker. On which property do I select the
correct module?

Are Coolio modules still a sensible choice as the Coolio project isn't
actively maintained?
_______________________________________________
Unicorn mailing list - mongrel-unicorn@rubyforge.org
http://rubyforge.org/mailman/listinfo/mongrel-unicorn
Do not quote signatures (like this one) or top post when replying
