Return-Path: <mongrel-unicorn-bounces@rubyforge.org>
X-Spam-Checker-Version: SpamAssassin 3.3.2 (2011-06-06) on dcvr.yhbt.net
X-Spam-Level: 
X-Spam-ASN: AS33070 50.56.128.0/17
X-Spam-Status: No, score=0.0 required=5.0 tests=none shortcircuit=no
 autolearn=unavailable version=3.3.2
X-Original-To: archivist@yhbt.net
Delivered-To: archivist@dcvr.yhbt.net
Received: from rubyforge.org (50-56-192-79.static.cloud-ips.com
 [50.56.192.79]) by dcvr.yhbt.net (Postfix) with ESMTP id 5067F1F4D3 for
 <archivist@yhbt.net>; Tue, 17 Jul 2012 00:51:36 +0000 (UTC)
Received: from localhost.localdomain (localhost [127.0.0.1]) by rubyforge.org
 (Postfix) with ESMTP id 7B9F02E064; Tue, 17 Jul 2012 00:51:35 +0000 (UTC)
X-Original-To: mongrel-unicorn@rubyforge.org
Delivered-To: mongrel-unicorn@rubyforge.org
X-Greylist: delayed 903 seconds by postgrey-1.31 at rubyforge; Tue, 17 Jul
 2012 00:49:06 UTC
Received: from ch1outboundpool.messaging.microsoft.com
 (ch1ehsobe002.messaging.microsoft.com [216.32.181.182]) by rubyforge.org
 (Postfix) with ESMTP id 776682E05F for <mongrel-unicorn@rubyforge.org>; Tue,
 17 Jul 2012 00:49:06 +0000 (UTC)
Received: from mail222-ch1-R.bigfish.com (10.43.68.229) by
 CH1EHSOBE012.bigfish.com (10.43.70.62) with Microsoft SMTP Server id
 14.1.225.23; Tue, 17 Jul 2012 00:34:03 +0000
Received: from mail222-ch1 (localhost [127.0.0.1])	by
 mail222-ch1-R.bigfish.com (Postfix) with ESMTP id 21BB41C01E4	for
 <mongrel-unicorn@rubyforge.org>; Tue, 17 Jul 2012 00:34:03 +0000 (UTC)
X-Forefront-Antispam-Report: CIP:149.173.6.148; KIP:(null); UIP:(null);
 IPV:NLI; H:mercav06d.na.sas.com; RD:mercav06d.na.sas.com; EFVD:NLI
X-SpamScore: -3
X-BigFish:
 S-3(zz936eI103dKzz1202hzz8275bhz32i2a8h668h839h944hcf6hd25he5bhf0ah107ah)
Received-SPF: permerror (mail222-ch1: error in processing during lookup of
 domain of sas.com: Could not find a valid SPF record)
 client-ip=149.173.6.148; envelope-from=Mark.Mccraw@sas.com;
 helo=mercav06d.na.sas.com ; d.na.sas.com ; 
Received: from mail222-ch1 (localhost.localdomain [127.0.0.1]) by mail222-ch1
 (MessageSwitch) id 1342485240351533_20309; Tue, 17 Jul 2012 00:34:00 +0000
 (UTC)
Received: from CH1EHSMHS022.bigfish.com
 (snatpool1.int.messaging.microsoft.com [10.43.68.248])	by
 mail222-ch1.bigfish.com (Postfix) with ESMTP id 4E67F220047	for
 <mongrel-unicorn@rubyforge.org>; Tue, 17 Jul 2012 00:34:00 +0000 (UTC)
Received: from mercav06d.na.sas.com (149.173.6.148) by
 CH1EHSMHS022.bigfish.com (10.43.70.22) with Microsoft SMTP Server (TLS) id
 14.1.225.23; Tue, 17 Jul 2012 00:34:00 +0000
X-TM-IMSS-Message-ID: <016de753000050ac@mercav06d.na.sas.com>
Received: from MERCHUB01R.na.SAS.com ([10.19.10.47]) by mercav06d.na.sas.com
 ([10.36.10.11]) with ESMTP (TREND IMSS SMTP Service 7.1; TLSv1/SSLv3
 AES128-SHA (128/128)) id 016de753000050ac ; Mon, 16 Jul 2012 20:33:58 -0400
Received: from MERCMBX18D.na.SAS.com ([fe80::4835:1148:f39e:c8b4]) by
 MERCHUB01R.na.SAS.com ([10.19.10.47]) with mapi id 14.02.0298.004; Mon, 16
 Jul 2012 20:33:58 -0400
From: Mark Mccraw <Mark.Mccraw@sas.com>
To: "mongrel-unicorn@rubyforge.org" <mongrel-unicorn@rubyforge.org>
Subject: Any signal other than -9 causes full CPU utilization by master
 unicorn process on FreeBSD
Thread-Topic: Any signal other than -9 causes full CPU utilization by master
 unicorn process on FreeBSD
Thread-Index: AQHNY7Pakz68E8ipbECAVja68zpQPg==
Date: Tue, 17 Jul 2012 00:33:58 +0000
Message-ID: <8902CCD4-F71D-4EC4-AC20-01F2C0B66599@sas.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-originating-ip: [10.23.14.35]
Content-ID: <78197558E9FE5F45A778092005DD28C6@wnt.sas.com>
MIME-Version: 1.0
X-OriginatorOrg: sas.com
X-BeenThere: mongrel-unicorn@rubyforge.org
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: <unicorn-public@bogomips.org>
List-Unsubscribe: <http://rubyforge.org/mailman/options/mongrel-unicorn>,
 <mailto:mongrel-unicorn-request@rubyforge.org?subject=unsubscribe>
List-Archive: <http://rubyforge.org/pipermail/mongrel-unicorn>
List-Post: <unicorn-public@bogomips.org>
List-Help: <mailto:mongrel-unicorn-request@rubyforge.org?subject=help>
List-Subscribe: <http://rubyforge.org/mailman/listinfo/mongrel-unicorn>,
 <mailto:mongrel-unicorn-request@rubyforge.org?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: mongrel-unicorn-bounces@rubyforge.org
Errors-To: mongrel-unicorn-bounces@rubyforge.org

Hi There!

I'm having a devil of a time figuring out a weird issue I'm running into.  I have unicorn configured to start 4 worker processes, and that works great.  However, when it's time to cycle the app, everything goes haywire. By trial and error, I have narrowed it down to this:  sending any signal to the master process other than SIGKILL fails miserably.  No new master process is created, as described in the documentation, nothing happens to the existing workers, nothing gets written to any log, and if I run top -u, I can see that very quickly the master ramps up to 100% CPU utilization.  This happens if I run 'kill -HUP <master pid>', 'kill -USR2 <master pid>', even 'kill -QUIT <master pid>'.

Here's what I'm running on:

uname -a
FreeBSD bb20web04.unx.sas.com 9.0-RELEASE FreeBSD 9.0-RELEASE #0: Tue Jan  3 07:46:30 UTC 2012     root@farrell.cse.buffalo.edu:/usr/obj/usr/src/sys/GENERIC  amd64

ruby -v
ruby 1.9.3p0 (2011-10-30 revision 33570) [amd64-freebsd9]

gem list | grep unicorn
unicorn (4.3.1)

My unicorn.rb file is pasted at the bottom.  It should be noted that I have tried every permutation of this I can think of to narrow out the problematic part (set preload_app to false, comment out preload_app), comment out before_exec, before_fork, after_fork, comment out the START_CTX[0] bit, etc), but things always fail the same way, so I'm guessing it's not the config, but I'm open to anything.  

Any suggestions at all are greatly appreciated.  I'd love to know how to interrupt the master process when it's slamming the CPU and get a stack trace, but I have no idea how in ruby.  Any thoughts?

Thanks!
Mark


APP_ROOT="/usr/local/rails/partsdb/current"
working_directory APP_ROOT
pid "#{APP_ROOT}/tmp/pids/unicorn.pid"
stderr_path "#{APP_ROOT}/log/unicorn.log"
stdout_path "#{APP_ROOT}/log/unicorn.log"
Unicorn::HttpServer::START_CTX[0] = "#{APP_ROOT}/bin/unicorn"
rails_env = ENV['RAILS_ENV'] || 'production'
worker_processes 4
timeout 120

# Speed up worker spawn times
preload_app true

listen "/tmp/unicorn.sock", :backlog => 10
listen "bb20web04:8080", :backlog => 1024

before_exec do |server|
  ENV["BUNDLE_GEMFILE"] = "#{APP_ROOT}/Gemfile"
end

before_fork do |server, worker|
  ##
  # When sent a USR2, Unicorn will suffix its pidfile with .oldbin and
  # immediately start loading up a new version of itself (loaded with a new
  # version of our app). When this new Unicorn is completely loaded
  # it will begin spawning workers. The first worker spawned will check to
  # see if an .oldbin pidfile exists. If so, this means we've just booted up
  # a new Unicorn and need to tell the old one that it can now die. To do so
  # we send it a QUIT.
  #
  # Using this method we get 0 downtime deploys.
  if defined?(ActiveRecord::Base)
    ActiveRecord::Base.connection.disconnect!
  end
  old_pid = APP_ROOT + '/tmp/pids/unicorn.pid.oldbin'
  if File.exists?(old_pid) && server.pid != old_pid
    begin
      Process.kill("QUIT", File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
    end
  end
end


after_fork do |server, worker|
  ##
  # Unicorn master loads the app then forks off workers - because of the way
  # Unix forking works, we need to make sure we aren't using any of the parent's
  # sockets, e.g. db connection
  if defined?(ActiveRecord::Base)
    ActiveRecord::Base.establish_connection
  end
  # Redis and Memcached would go here but their connections are established
  # on demand, so the master never opens a socket
end


_______________________________________________
Unicorn mailing list - mongrel-unicorn@rubyforge.org
http://rubyforge.org/mailman/listinfo/mongrel-unicorn
Do not quote signatures (like this one) or top post when replying
