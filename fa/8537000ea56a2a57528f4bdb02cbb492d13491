Return-Path: <mongrel-unicorn-bounces@rubyforge.org>
X-Spam-Checker-Version: SpamAssassin 3.3.2 (2011-06-06) on dcvr.yhbt.net
X-Spam-Level: 
X-Spam-ASN: AS33070 50.56.128.0/17
X-Spam-Status: No, score=-0.1 required=5.0 tests=AWL,FREEMAIL_FROM,
 T_DKIM_INVALID shortcircuit=no autolearn=unavailable version=3.3.2
X-Original-To: archivist@yhbt.net
Delivered-To: archivist@dcvr.yhbt.net
Received: from rubyforge.org (50-56-192-79.static.cloud-ips.com
 [50.56.192.79]) by dcvr.yhbt.net (Postfix) with ESMTP id C48DF1F862 for
 <archivist@yhbt.net>; Thu,  1 Mar 2012 23:59:06 +0000 (UTC)
Received: from localhost.localdomain (localhost [127.0.0.1]) by rubyforge.org
 (Postfix) with ESMTP id DBF0F263025; Thu,  1 Mar 2012 23:59:04 +0000 (UTC)
X-Original-To: mongrel-unicorn@rubyforge.org
Delivered-To: mongrel-unicorn@rubyforge.org
Received: from mail-iy0-f178.google.com (mail-iy0-f178.google.com
 [209.85.210.178]) by rubyforge.org (Postfix) with ESMTP id 6014226276B for
 <mongrel-unicorn@rubyforge.org>; Thu,  1 Mar 2012 23:52:48 +0000 (UTC)
Received: by iakl21 with SMTP id l21so1894348iak.23 for
 <mongrel-unicorn@rubyforge.org>; Thu, 01 Mar 2012 15:52:48 -0800 (PST)
Received-SPF: pass (google.com: domain of somers.ben@gmail.com designates
 10.50.85.202 as permitted sender) client-ip=10.50.85.202; 
Authentication-Results: mr.google.com; spf=pass (google.com: domain of
 somers.ben@gmail.com designates 10.50.85.202 as permitted sender)
 smtp.mail=somers.ben@gmail.com; dkim=pass header.i=somers.ben@gmail.com
Received: from mr.google.com ([10.50.85.202]) by 10.50.85.202 with SMTP id
 j10mr13086354igz.58.1330645968212 (num_hops = 1); Thu, 01 Mar 2012 15:52:48
 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com;
 s=20120113; h=mime-version:from:date:message-id:subject:to:content-type
 :content-transfer-encoding; bh=y3q27/PtR7XDGXGv+GidXtMhxBYRpSWOq3BTKJ6JIbw=;
 b=0Lsi72QBgWd76U0JSeQV1wbX/5mACClnxpATXG01oBmIWNiuGNcpZXOfLap2L1mAOG
 v4EDyReDV9YhRUBUWUji6btHILZHyTWKX3NO5dOpPVGbd7T4HcVloVGsFicD9cihXJlj
 WxYCC3gCkhreBu5FrjkPYi06Y4XMJ5QP42luH6nG5/TL1DD0rMCpNMonZW7a76lwIiXd
 kTJwY0tWL1BvvbZhg4dUXob/pxA7amYNJIf/LQ7KMopVFJbbfdEovJRot7mhknp/FlJJ
 Wn9hvcwaWRMtNgDqoN03EIrs3gw4QPpG1e0MXgB0Qp4tr+izIdPluR8Ai3BNW/jQdxKF yC9A==
Received: by 10.50.85.202 with SMTP id j10mr10794128igz.58.1330645968173;
 Thu, 01 Mar 2012 15:52:48 -0800 (PST)
MIME-Version: 1.0
Received: by 10.42.227.137 with HTTP; Thu, 1 Mar 2012 15:52:07 -0800 (PST)
From: Ben Somers <somers.ben@gmail.com>
Date: Thu, 1 Mar 2012 15:52:07 -0800
Message-ID:
 <CAO1NZAqqfQRHhSz0jxcTtO6ngxOxFSq5dQm7UPJdXm7uidV79g@mail.gmail.com>
Subject: murdering high-memory workers and auto-scaling
To: mongrel-unicorn <mongrel-unicorn@rubyforge.org>
X-BeenThere: mongrel-unicorn@rubyforge.org
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: <unicorn-public@bogomips.org>
List-Unsubscribe: <http://rubyforge.org/mailman/options/mongrel-unicorn>,
 <mailto:mongrel-unicorn-request@rubyforge.org?subject=unsubscribe>
List-Archive: <http://rubyforge.org/pipermail/mongrel-unicorn>
List-Post: <unicorn-public@bogomips.org>
List-Help: <mailto:mongrel-unicorn-request@rubyforge.org?subject=help>
List-Subscribe: <http://rubyforge.org/mailman/listinfo/mongrel-unicorn>,
 <mailto:mongrel-unicorn-request@rubyforge.org?subject=subscribe>
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Sender: mongrel-unicorn-bounces@rubyforge.org
Errors-To: mongrel-unicorn-bounces@rubyforge.org

Two ideas, one more controversial than the other.
First: auto-killing bloated workers.=A0My current app has some memory
leakage that wasn't really visible on our older passenger setup, since
the auto-scaling meant that bloated workers got killed periodically.
In a perfect world, we'd find and patch all of the leaks, but in the
meantime (and as a safety net) I'd like to get the bloated workers
auto-killed. It looks like it'd be simple to add in a bloated-worker
check at the same point when we check for timeout violations, and it
could be hidden behind a config setting. Alternately, I could write
this in a separate script.

Pros: might be a useful built-in feature, looks easy to implement the killi=
ng
Cons: Getting the memory usage might actually be surprisingly
difficult. Comparing to passenger's memory management code, where they
actually=A0use platform-specific system calls, and we might get a
sizeable quantity of code that we don't want dirtying up the unicorn
internals. Also, some methods of checking appear to have performance
risks.

Second: in my use case, I have webservers running as VMs, sharing a
physical box with backend utility servers. The util servers run lots
of very CPU- and memory-hungry jobs, mostly at night; the webservers
handle requests, mostly in the daytime. Currently, most of these
webservers are running passenger, which is very polite about not using
more resources than it needs to handle requests. Unicorn, by contrast
(and by design) is very resource-greedy, what with the "scale to what
you can theoretically handle" strategy. If I spin down my number of
unicorn workers when they're not needed, I free up resources for my
util servers, which is important. TTOU and TTIN signals give me a
(very nice) means to write an auto-scaling module outside of unicorn,
but it might be nice to have it included as an optional component. (I
expect this will get voted down, as I expect the dev team is not
interested in it).

Happy to work on implementing these myself, just wanted to poll to see
if it'd be worth developing them as part of unicorn proper rather than
standalone scripts.

-ben
_______________________________________________
Unicorn mailing list - mongrel-unicorn@rubyforge.org
http://rubyforge.org/mailman/listinfo/mongrel-unicorn
Do not quote signatures (like this one) or top post when replying
